#!/usr/bin/env ruby
require 'stronghold'
require 'getoptlong'
require 'json'

##
# Get value from recursive hash given string path
def extract(res, path = "/")
  rem = path.split("/").select{|p| p != ""}
  while (rem.length > 0) && (res = res[rem[0]])
    rem.shift
  end
  if rem.length > 0
    die(-10,"No #{path} in #{$path}")
  end
  res
end

def format(res)
  if res.class == Hash
    JSON.pretty_generate(res)
  else
    res
  end
end

##
# Set value in recursive hash, when given the hash path and value
def intract(res, path, val)
  split_path = path.split(?/).select{|p| p != ""}
  leaf = split_path[0..-2]
    .reduce(res){|old, new| (old[new].nil? ? old.update(new => {}) : old)[new] }
  leaf.update({split_path[-1] => val}) do |key,oldval,newval|
    if oldval.class == Hash && !$force
      die(-11,"Won't overwrite hash in update of #{path}, would overwrite #{oldval}")
    else
      newval
    end
  end
  res
end

##
# Get binary for exec
def which(cmd)
  return cmd if cmd[0] == ?/ && File.executable?(cmd)
  exts = ENV['PATHEXT'] ? ENV['PATHEXT'].split(';') : ['']
  ENV['PATH'].split(File::PATH_SEPARATOR).each do |path|
    exts.each { |ext|
      exe = File.join(path, "#{cmd}#{ext}")
      return exe if File.executable? exe
    }
  end
  return nil
end

def die(code,message)
  $stderr.puts "stronghold-cli: #{message}"
  $stderr.flush
  Kernel.exit!(code)
end

def client
  begin
    $client ||= Stronghold::Client.new($url)
  rescue Stronghold::ConnectionError => ex
    die(-1,"Cannot connect to stronghold at #{$url}")
  end
end

def path_valid?(arg)
  (arg.length > 1 && arg.start_with?(*(client.head.tree.paths - [""]))) || arg == "/"
end

##
# Set mode. E.g you can't use --set and --get in the same invocation
def mode_ify(opt)
  die(-1, "Can't use #{opt} in --#{mode.to_s}") if $mode && $mode != opt
  $mode = opt
end

def valid_path
  die(-4,"Need to define path first, with --app or --path") unless $path
  die(-1,"Path #{arg} does not match except at root") unless path_valid?($path)
end

def valid_tree(nxt = false)
  valid_path
  if nxt
    client.head.tree.next_materialized($path)[:data]
  else
    client.head.tree.materialized($path)
  end
end

def data_path(arg)
  arg == "" ? "/" : arg
end

opts = GetoptLong.new(
  [ '--env', '-e', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--get', '-g', GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--next', '-n', GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--set', '-s', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--app', '-a', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--history', '-h', GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--path', '-p', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--url', '-u', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--list', '-l', GetoptLong::NO_ARGUMENT ],
  [ '--force', '-f', GetoptLong::NO_ARGUMENT ],
  [ '--run', '-r', GetoptLong::NO_ARGUMENT ],
)
opts.ordering = GetoptLong::REQUIRE_ORDER

$mode = nil
tree = nil
$url = "http://127.0.0.1:5040"
opts.each do |opt, arg|
  case opt
  when '--url'
    $url = arg
  when '--list'
    mode_ify(opt)
    puts client.head.tree.paths.join(",")
  when '--path'
    $path = arg
  when '--app'
    filepath = "/etc/stronghold-cli.d/#{arg}"
    die(-5, "File not readable: #{filepath}") unless File.readable?(filepath)
    $path = IO.read(filepath)
  when '--history'
    mode_ify(opt)
    valid_path
    client.versions.before(client.head, 5).reverse.each{|version|
      change = version.change
      puts "At #{Time.at(change.timestamp).ctime} [#{change.author}]: #{change.comment}"
      puts format(extract(version.tree.materialized($path), data_path(arg)))
    }
  when '--env'
    mode_ify(opt)
    from, to = arg.split(?:)
    die(-6, "Wrong format to env, use like --env=hashpath:VAR") if from.nil? || to.nil?
    ENV[to] = extract(valid_tree(), from).to_s
  when '--force'
    $force = true
  when '--run'
    $run = true
  when '--next'
    mode_ify(opt)
    old = extract(valid_tree(), arg)
    new = old
    while(old == new)
      new = extract(valid_tree(true), data_path(arg))
    end
    puts format(new)
  when '--set'
    mode_ify(opt)
    internal_path,to,comment = arg.split(?:)
    if internal_path.nil? || to.nil?
      die(-6,"Wrong format to set, use like --set=hashpath:value:[comment]")
    end
    client.head.update({
        :path => $path,
        :author => "command-line on #{Socket.gethostname}",
        :data => intract(client.head.tree.peculiar($path), internal_path, to),
        :comment => comment || "At level #{$path} set #{arg}"
      })
  when '--get'
    mode_ify(opt)
    puts format(extract(valid_tree(), data_path(arg)))
  end
end
if $mode == "--env" or $run
  if ARGV.length > 0 && (app = which(ARGV[0]))
    Kernel.exec(ENV, app, *ARGV[1..-1])
  else
    puts "Env requires an executable last argument, after --, either in your PATH or fully qualified"
  end
elsif $mode == nil
  puts "$ stronghold-cli (--path /path/ |--app app | --list) [operation]"
  puts
  puts "Operations:"
  puts
  puts "  --next [/data/path]"
  puts "  Wait for next stronghold change matched by data path and print"
  puts
  puts "  --history [/data/path]"
  puts "  Show the impact of the last 5 versions on this data path"
  puts
  puts "  --get [/data/path] ..."
  puts "  Get data matched by data path from stronghold head and print"
  puts
  puts "  --set /data/path:to_value ..."
  puts "  Set value of data path, creating hashes as we go. Use --force to overwrite"
  puts
  puts "  --env /data/path:PATHDATA ... -- runnable"
  puts "  Get data from stronghold head and put in environment variable, and run runnable"
end
